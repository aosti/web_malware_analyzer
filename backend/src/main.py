from databases import Database
from datetime import datetime
from fastapi import FastAPI, Depends, File, UploadFile, Request
from fastapi.middleware.cors import CORSMiddleware
from features import PEFeatureExtractor
from pydantic import BaseModel
from typing import List

import hashlib
import joblib
import lightgbm
import numpy as np
import sqlalchemy

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)
database = Database('mysql://root:tijolo22@database/app')

metadata = sqlalchemy.MetaData()

submissions = sqlalchemy.Table(
    "submissions",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer, primary_key=True),
    sqlalchemy.Column("ip", sqlalchemy.String(128)),
    sqlalchemy.Column("sample_hash", sqlalchemy.String(66)),
    sqlalchemy.Column("verdict", sqlalchemy.String(12)),
    sqlalchemy.Column("date", sqlalchemy.DateTime),
)

class Submission(BaseModel):
    sample_hash: str
    verdict: str
    date: datetime


engine = sqlalchemy.create_engine(
    'mysql+pymysql://root:tijolo22@192.168.0.3/app'
)
metadata.create_all(engine)

async def load_model():
    return joblib.load('lgbm_full.joblib')

def simple_save(sample_hash, content):
    with open(f'/app/samples/{sample_hash}', 'wb') as binary_sample:
        binary_sample.write(content)

@app.post("/submit/")
async def submit_sample(request: Request, file: UploadFile = File(...), model = Depends(load_model)):
    malware = { 0 : 'benign', 1 : 'malware', 2: 'invalid' }
    content = await file.read()
    sample_hash = hashlib.sha256(content).hexdigest()
    if content.startswith(b'MZ'):
        simple_save(sample_hash, content)
        features = PEFeatureExtractor().feature_vector(content)
        features = features.reshape(1, -1)
        result = model.predict(features)[0]
    else:
        result = 2
    query = submissions.insert().values(ip=request.client.host, sample_hash=sample_hash, verdict=malware[result], date=datetime.now())
    last_record_id = await database.execute(query)
    return { "result" : malware[result] }

@app.get("/last_submissions", response_model=List[Submission])
async def get_last_submissions():
    query = "SELECT date, sample_hash, verdict FROM submissions ORDER BY id DESC LIMIT 5"
    recent_submissions = await database.fetch_all(query)
    return recent_submissions

@app.on_event("startup")
async def startup():
    await database.connect()

@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()